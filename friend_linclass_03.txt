#include <cmath>
#include "stdafx.h"
#include <Windows.h>
#include <iostream>
using namespace std;
const double M_PI = 3.14159265358979323846;
class Calculator
{
private:
	double mx, my, mz;
	double value;

public:
	Calculator();
	Calculator(double x, double y, double z);
	~Calculator();
	void set(double x, double y, double z);
	void print();
	void run();
	friend void print(Calculator & c);
	friend void run(Calculator & c);
	friend void print(Calculator *c);
	friend void run(Calculator *c);
};
Calculator::Calculator()
{
	//cout << "Creating a Calculator instance: " << this << endl;
}

Calculator::Calculator(double x, double y, double z){
	mx = x;
	my = y;
	mz = z;
}

Calculator::~Calculator()
{
	//cout << "Destroying a Calculator instance: " << this << endl;
}

void Calculator::set(double x, double y, double z) {
	mx = x;
	my = y;
	mz = z;
}

void Calculator::print(){
	cout << "function value: " << value << endl;
}

void Calculator::run(){
	//cout << "params: [ " << mx << " " << my << " " << mz << " ]" << endl;
	value = pow(my, mx + 1) / (pow(abs(my - 2), 1. / 3.) + 3);
	//cout << "first pass value: " << value << endl;
	value += (mx + my / 2)*(pow(mx + 1, -1 / sin(mz))) / (2 * abs(mx + my));
	//cout << "second pass value: " << value << endl;
}

void print(Calculator &c){
	cout << "[reference] fuction c.value:" << c.value << endl;
}

void run(Calculator &c){
	c.value = pow(c.my, c.mx + 1) / (pow(abs(c.my - 2), 1. / 3.) + 3);
	c.value += (c.mx + c.my / 2)*(pow(c.mx + 1, -1 / sin(c.mz))) / (2 * abs(c.mx + c.my));
}
void print(Calculator *c){
	cout << "[pointer] fuction c.value:" << c->value << endl;
}

void run(Calculator *c){
	c->value = pow(c->my, c->mx + 1) / (pow(abs(c->my - 2), 1. / 3.) + 3);
	c->value += (c->mx + c->my / 2)*(pow(c->mx + 1, -1 / sin(c->mz))) / (2 * abs(c->mx + c->my));
}

int _tmain(int argc, _TCHAR* argv[])
{
	cout << "Static allocation, direct addressing" << endl;
	Calculator c;
	c.set(1.23, 15.4, 252.);
	c.run();
	c.print();
	cout << "Static allocation, indirect addressing" << endl;
	Calculator c2;
	Calculator *pc = &c2;
	pc->set(1.23, 15.4, 252.);
	pc->run();
	pc->print();
	cout << "dynamic allocation, indirect addressing" << endl;
	Calculator *pc2 = new Calculator;
	pc2->set(1.23, 15.4, 252.);
	pc2->run();
	pc2->print();

	cout << "friend function call" << endl;
	Calculator c3(1.23, 15.4, 252.);
	Calculator *pc4 = new Calculator(c3);
	Calculator *pc3 = new Calculator(1.23, 15.4, 252.);
	run(c3);
	print(c3);
	run(pc3);
	print(pc3);
	run(pc4);
	print(pc4);

	delete pc2;
	delete pc3;
	delete pc4;
	//Sleep(100000);
	return 0;
}
